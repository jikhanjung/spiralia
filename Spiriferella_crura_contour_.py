contour_list=[[[(1.18,3.27,-3.627),(1.2,3.35,-3.627),(1.28,3.42,-3.627),(1.36,3.46,-3.627),(1.44,3.48,-3.627),(1.52,3.49,-3.627),(1.6,3.48,-3.627),(1.68,3.42,-3.627),(1.72,3.34,-3.627),(1.7,3.27,-3.627),(1.63,3.22,-3.627),(1.56,3.18,-3.627),(1.49,3.17,-3.627),(1.42,3.18,-3.627),(1.35,3.2,-3.627),(1.28,3.21,-3.627)],
[(-2.45,3.08,-3.627),(-2.45,3.15,-3.627),(-2.38,3.22,-3.627),(-2.31,3.26,-3.627),(-2.24,3.3,-3.627),(-2.17,3.33,-3.627),(-2.1,3.35,-3.627),(-2.03,3.36,-3.627),(-1.96,3.27,-3.627),(-1.97,3.19,-3.627),(-2.01,3.11,-3.627),(-2.06,3.03,-3.627),(-2.13,2.95,-3.627),(-2.21,2.92,-3.627),(-2.29,2.94,-3.627),(-2.37,3.0,-3.627)]],
[[(-2.0,3.26,-3.2239999999999998),(-1.98,3.34,-3.2239999999999998),(-1.92,3.41,-3.2239999999999998),(-1.84,3.47,-3.2239999999999998),(-1.76,3.5,-3.2239999999999998),(-1.68,3.5,-3.2239999999999998),(-1.6,3.46,-3.2239999999999998),(-1.53,3.39,-3.2239999999999998),(-1.47,3.29,-3.2239999999999998),(-1.48,3.21,-3.2239999999999998),(-1.55,3.13,-3.2239999999999998),(-1.63,3.1,-3.2239999999999998),(-1.71,3.08,-3.2239999999999998),(-1.79,3.09,-3.2239999999999998),(-1.87,3.11,-3.2239999999999998),(-1.95,3.17,-3.2239999999999998)],
[(0.76,3.22,-3.2239999999999998),(0.76,3.29,-3.2239999999999998),(0.83,3.31,-3.2239999999999998),(0.9,3.29,-3.2239999999999998),(0.97,3.25,-3.2239999999999998),(1.04,3.21,-3.2239999999999998),(1.11,3.17,-3.2239999999999998),(1.18,3.12,-3.2239999999999998),(1.31,3.0,-3.2239999999999998),(1.29,2.92,-3.2239999999999998),(1.21,2.88,-3.2239999999999998),(1.13,2.85,-3.2239999999999998),(1.05,2.86,-3.2239999999999998),(0.97,2.91,-3.2239999999999998),(0.91,2.99,-3.2239999999999998),(0.84,3.07,-3.2239999999999998)]],
[[(-1.87,3.3,-2.8209999999999997),(-1.86,3.37,-2.8209999999999997),(-1.81,3.44,-2.8209999999999997),(-1.74,3.49,-2.8209999999999997),(-1.67,3.51,-2.8209999999999997),(-1.6,3.51,-2.8209999999999997),(-1.53,3.51,-2.8209999999999997),(-1.46,3.51,-2.8209999999999997),(-1.37,3.42,-2.8209999999999997),(-1.37,3.33,-2.8209999999999997),(-1.4,3.24,-2.8209999999999997),(-1.46,3.15,-2.8209999999999997),(-1.55,3.08,-2.8209999999999997),(-1.64,3.05,-2.8209999999999997),(-1.73,3.07,-2.8209999999999997),(-1.81,3.15,-2.8209999999999997)],
[(0.92,3.1,-2.8209999999999997),(0.94,3.18,-2.8209999999999997),(0.98,3.26,-2.8209999999999997),(1.05,3.32,-2.8209999999999997),(1.13,3.33,-2.8209999999999997),(1.21,3.33,-2.8209999999999997),(1.29,3.3,-2.8209999999999997),(1.37,3.26,-2.8209999999999997),(1.44,3.16,-2.8209999999999997),(1.42,3.06,-2.8209999999999997),(1.39,2.96,-2.8209999999999997),(1.33,2.86,-2.8209999999999997),(1.23,2.82,-2.8209999999999997),(1.13,2.85,-2.8209999999999997),(1.03,2.89,-2.8209999999999997),(0.96,2.99,-2.8209999999999997)]],
[[(-1.84,3.6,-2.4179999999999997),(-1.82,3.65,-2.4179999999999997),(-1.77,3.68,-2.4179999999999997),(-1.72,3.71,-2.4179999999999997),(-1.67,3.74,-2.4179999999999997),(-1.62,3.74,-2.4179999999999997),(-1.57,3.74,-2.4179999999999997),(-1.52,3.72,-2.4179999999999997),(-1.41,3.64,-2.4179999999999997),(-1.43,3.52,-2.4179999999999997),(-1.47,3.4,-2.4179999999999997),(-1.45,3.28,-2.4179999999999997),(-1.54,3.18,-2.4179999999999997),(-1.66,3.2,-2.4179999999999997),(-1.74,3.32,-2.4179999999999997),(-1.77,3.44,-2.4179999999999997)],
[(1.01,3.28,-2.4179999999999997),(1.02,3.35,-2.4179999999999997),(1.05,3.42,-2.4179999999999997),(1.12,3.49,-2.4179999999999997),(1.19,3.55,-2.4179999999999997),(1.26,3.6,-2.4179999999999997),(1.33,3.58,-2.4179999999999997),(1.35,3.51,-2.4179999999999997),(1.38,3.39,-2.4179999999999997),(1.38,3.31,-2.4179999999999997),(1.33,3.23,-2.4179999999999997),(1.28,3.16,-2.4179999999999997),(1.2,3.1,-2.4179999999999997),(1.12,3.08,-2.4179999999999997),(1.05,3.12,-2.4179999999999997),(1.04,3.2,-2.4179999999999997)]],
[[(1.2,3.84,-2.015),(1.21,3.92,-2.015),(1.22,4.0,-2.015),(1.25,4.08,-2.015),(1.29,4.16,-2.015),(1.37,4.23,-2.015),(1.45,4.3,-2.015),(1.53,4.37,-2.015),(1.66,4.34,-2.015),(1.64,4.21,-2.015),(1.62,4.08,-2.015),(1.57,3.95,-2.015),(1.52,3.82,-2.015),(1.46,3.69,-2.015),(1.36,3.57,-2.015),(1.24,3.64,-2.015)],
[(-2.12,3.73,-2.015),(-2.1,3.79,-2.015),(-2.04,3.82,-2.015),(-1.98,3.82,-2.015),(-1.92,3.81,-2.015),(-1.86,3.77,-2.015),(-1.83,3.71,-2.015),(-1.79,3.65,-2.015),(-1.72,3.55,-2.015),(-1.73,3.45,-2.015),(-1.78,3.35,-2.015),(-1.81,3.26,-2.015),(-1.91,3.33,-2.015),(-1.97,3.43,-2.015),(-2.03,3.53,-2.015),(-2.08,3.63,-2.015)]],
[[(0.78,4.15,-1.6119999999999999),(0.88,4.23,-1.6119999999999999),(1.02,4.26,-1.6119999999999999),(1.16,4.34,-1.6119999999999999),(1.3,4.45,-1.6119999999999999),(1.43,4.57,-1.6119999999999999),(1.57,4.6,-1.6119999999999999),(1.71,4.59,-1.6119999999999999),(1.88,4.51,-1.6119999999999999),(1.8,4.31,-1.6119999999999999),(1.68,4.21,-1.6119999999999999),(1.48,4.04,-1.6119999999999999),(1.38,4.11,-1.6119999999999999),(1.35,4.23,-1.6119999999999999),(1.18,4.24,-1.6119999999999999),(0.98,4.15,-1.6119999999999999)],
[(-2.4,3.89,-1.6119999999999999),(-2.4,3.97,-1.6119999999999999),(-2.37,4.05,-1.6119999999999999),(-2.3,4.1,-1.6119999999999999),(-2.22,4.09,-1.6119999999999999),(-2.16,4.01,-1.6119999999999999),(-2.1,3.93,-1.6119999999999999),(-2.03,3.85,-1.6119999999999999),(-1.97,3.74,-1.6119999999999999),(-1.99,3.66,-1.6119999999999999),(-2.01,3.58,-1.6119999999999999),(-2.06,3.51,-1.6119999999999999),(-2.14,3.54,-1.6119999999999999),(-2.21,3.61,-1.6119999999999999),(-2.27,3.69,-1.6119999999999999),(-2.33,3.77,-1.6119999999999999)]],
[[(-2.69,4.04,-1.2089999999999999),(-2.66,4.11,-1.2089999999999999),(-2.58,4.1,-1.2089999999999999),(-2.5,4.08,-1.2089999999999999),(-2.42,4.07,-1.2089999999999999),(-2.34,4.05,-1.2089999999999999),(-2.26,4.03,-1.2089999999999999),(-2.18,4.01,-1.2089999999999999),(-2.09,3.96,-1.2089999999999999),(-2.2,3.92,-1.2089999999999999),(-2.33,3.92,-1.2089999999999999),(-2.18,3.81,-1.2089999999999999),(-2.1,3.66,-1.2089999999999999),(-2.2,3.61,-1.2089999999999999),(-2.35,3.71,-1.2089999999999999),(-2.5,3.83,-1.2089999999999999)],
[(1.03,3.55,-1.2089999999999999),(1.17,3.73,-1.2089999999999999),(1.34,3.88,-1.2089999999999999),(1.52,4.04,-1.2089999999999999),(1.69,4.14,-1.2089999999999999),(1.87,4.3,-1.2089999999999999),(2.05,4.36,-1.2089999999999999),(2.23,4.41,-1.2089999999999999),(2.46,4.46,-1.2089999999999999),(2.35,4.26,-1.2089999999999999),(2.15,4.15,-1.2089999999999999),(1.95,4.07,-1.2089999999999999),(1.75,4.04,-1.2089999999999999),(1.64,3.85,-1.2089999999999999),(1.44,3.72,-1.2089999999999999),(1.24,3.6,-1.2089999999999999)]]]
centroid_list=[[(1.45,-3.32,-3.627),
(-2.2,-3.14,-3.627)],[(-1.74,-3.28,-3.2239999999999998),
(1.02,-3.06,-3.2239999999999998)],[(-1.62,-3.3,-2.8209999999999997),
(1.18,-3.08,-2.8209999999999997)],[(-1.61,-3.47,-2.4179999999999997),
(1.19,-3.33,-2.4179999999999997)],[(1.41,-3.98,-2.015),
(-1.91,-3.57,-2.015)],[(1.46,-4.33,-1.6119999999999999),
(-2.19,-3.81,-1.6119999999999999)],[(-2.37,-3.88,-1.2089999999999999),
(1.76,-4.05,-1.2089999999999999)]]

import bpy
import bmesh
import time 

mesh = bpy.data.meshes.new("mesh")  # add a new mesh
obj = bpy.data.objects.new("MyObject", mesh)  # add a new object using the mesh

scene = bpy.context.scene
scene.objects.link(obj)  # put the object into the scene (link)
scene.objects.active = obj  # set as the active object in the scene
obj.select = True  # select object

mesh = bpy.context.object.data
bm =  bmesh.new()

# contour 
all_contour_model = []
section_index = 0
for contours_in_a_section in contour_list:
    contour_model_in_a_section = []

    contour_index = 0
    for contour in contours_in_a_section:
        contour_model = { 'index':[section_index+1,contour_index],'v':[], 'e':[], 'bottom':True, 'top':True, 'above':[], 'below':[], 'coords':[], 'branching_processed': False, 'centroid':[], 'contour_length':-1 }
        contour_model['contour_length'] = len( contour )
        for v in contour:
            contour_model['v'].append( bm.verts.new(v) )
            contour_model['coords'].append( v )
        for i in range( len( contour_model['v'] ) ):
            contour_model['e'].append( bm.edges.new( ( contour_model['v'][i],contour_model['v'][(i+1)%len(contour_model['v'])] ) ) )
        contour_model['centroid'] = centroid_list[section_index][contour_index]
        contour_model_in_a_section.append( contour_model )
        contour_index += 1
    all_contour_model.append( contour_model_in_a_section )
    section_index += 1


# contour model connectivity processing
for contour_model_in_a_section in all_contour_model:
    contour1 = contour_model_in_a_section[0].copy()
    contour2 = contour_model_in_a_section[1].copy()

    if contour1['coords'][0] > contour2['coords'][0]:
        contour_model_in_a_section[0] = contour2
        contour_model_in_a_section[1] = contour1

# close top and bottom
face1 = bm.faces.new( tuple( all_contour_model[0][0]['v'] ) )
face1 = bm.faces.new( tuple( all_contour_model[0][1]['v'] ) )
face1 = bm.faces.new( tuple( reversed( all_contour_model[-1][0]['v'] ) ) )
face1 = bm.faces.new( tuple( reversed( all_contour_model[-1][1]['v'] ) ) )

# create faces
for i in range( len( all_contour_model ) - 1 ): 
  
    contours_in_below_section = all_contour_model[i]
    contours_in_above_section = all_contour_model[i+1]

    for j in range(2):
        contour1 = contours_in_below_section[j]
        contour2 = contours_in_above_section[j]
        print( contour1['coords'] )
        print( contour2['coords'] )
        for k in range( len( contour1['v'] ) ):
            idx1 = k 
            idx2 = ( idx1 + 1 ) % len( contour1['v'] )
            print( i, j, idx1, idx2 )
            face1 = bm.faces.new( ( contour1['v'][idx2], contour1['v'][idx1], contour2['v'][idx1], contour2['v'][idx2] ) )
        # make the bmesh the object's mesh
        bm.to_mesh(mesh)  
        #time.sleep(2)


bm.free()  # always do this when finished
